package com.kodeworks.possy

import org.junit.{Assert, Test}

import scala.io.{Codec, BufferedSource, Source}
import scala.util.Success
import DemParser._

class TestDemParser {
  @Test
  def testRecordTypeA {
    val recordTypeAString = """6602_1_sone33                                                                                                                          0             1     1     1    33       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000     2     2     4  249800.000000000000000 6649800.000000000000000  249800.000000000000000 6700200.000000000000000  300200.000000000000000 6700200.000000000000000  300200.000000000000000 6649800.000000000000000      -2.000000000000000     757.000000000000000       0.000000000000000     0   10.000000   10.000000    0.100000     1  5041    00    00   0   0 0 0 0 3   0   0 0 0 0 00.00                                                                                                                """
    val parsed = parse(recordTypeA, recordTypeAString)
    println(parsed)
    parsed.get
  }

  @Test
  def testRecordTypeB {
    val recordTypeBString = """     1     1  5041     1  249800.000000000000000 6649800.000000000000000       0.000000000000000      97.908973693847656     655.099914550781250  1277  1287  1295  1301  1306  1311  1314  1314  1313  1311  1304  1299  1295  1283  1266  1245  1216  1190  1168  1132  1085  1032  1011  1004  1003  1004  1007  1010  1014  1014  1008   999   990   981   979   987   998  1013  1027  1041  1052  1061  1072  1084  1096  1107  1117  1131  1152  1176  1196  1210  1221  1232  1243  1249  1252  1253  1258  1266  1275  1286  1297  1307  1317  1328  1342  1356  1370  1384  1411  1437  1451  1451  1450  1458  1471  1484  1496  1506  1516  1527  1538  1547  1554  1567  1589  1615  1644  1675  1702  1722  1739  1755  1770  1787  1803  1819  1836  1854  1874  1897  1924  1945  1954  1957  1966  1986  2004  2014  2023  2030  2033  2035  2043  2053  2062  2078  2099  2116  2117  2113  2113  2115  2118  2123  2133  2149  2175  2203  2228  2244  2267  2308  2373  2442  2506  2563  2621  2676  2730  2818  2904  2933  2941  2939    """
    val parsed = parse(recordTypeB, recordTypeBString)
    println(parsed)
    parsed.get
  }

@Test
  def testRecordTypeB2 {
  val recordTypeB2String = """  2929  2917  2905  2899  2894  2886  2878  2873  2867  2838  2824  2828  2843  2850  2846  2840  2829  2817  2814  2815  2824  2853  2885  2912  2935  2946  2944  2953  2953  2942  2930  2903  2865  2842  2831  2830  2830  2831  2835  2849  2871  2894  2899  2895  2884  2885  2889  2894  2897  2901  2904  2916  2929  2942  2957  2976  3002  3025  3048  3075  3109  3137  3155  3179  3214  3262  3310  3345  3367  3387  3400  3409  3408  3413  3427  3441  3452  3457  3454  3452  3454  3475  3492  3499  3501  3499  3498  3498  3501  3509  3501  3491  3481  3447  3415  3399  3398  3402  3405  3408  3405  3394  3381  3368  3355  3336  3313  3289  3269  3250  3232  3216  3199  3179  3156  3132  3109  3083  3056  3026  2994  2959  2921  2876  2827  2778  2739  2708  2680  2646  2597  2534  2499  2502  2524  2526  2502  2456  2418  2397  2379  2364  2352  2341  2332  2321  2306  2291  2282  2280  2279  2275  2271  2266  2261  2256  2252  2250  2250  2250  2244  2232  2217  2203  2194  2185  2173  2160  2145  2122    """
  val parsed = parse(recordTypeB2, recordTypeB2String)
  println(parsed)
  parsed.get
}

  @Test
  def testDemParser {
    val f: BufferedSource = Source.fromFile("C:/dev/src/temp/6602_1_10m_z33.dem")(Codec.ISO8859)
    val dem = parse(recordTypeA, f.bufferedReader())
    f.close()
    println(dem)
  }

  @Test
  def testAnyN: Unit = {
    val s = "     1" //5 space, 1
    val p = DemParser.parse(DemParser.anyN(6), s)
    p.get
  }
}
