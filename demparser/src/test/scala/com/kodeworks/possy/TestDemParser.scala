package com.kodeworks.possy

import org.junit.{Assert, Test}

import scala.io.{Codec, BufferedSource, Source}
import scala.util.Success
import DemParser._

class TestDemParser {
  @Test
  def testRecordTypeA {
    val recordTypeAString = """6602_1_sone33                                                                                                                          0             1     1     1    33       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000       0.000000000000000     2     2     4  249800.000000000000000 6649800.000000000000000  249800.000000000000000 6700200.000000000000000  300200.000000000000000 6700200.000000000000000  300200.000000000000000 6649800.000000000000000      -2.000000000000000     757.000000000000000       0.000000000000000     0   10.000000   10.000000    0.100000     1  5041    00    00   0   0 0 0 0 3   0   0 0 0 0 00.00                                                                                                                """
    val parsed = parse(recordTypeA, recordTypeAString)
    println(parsed)
    parsed.get
  }

  @Test
  def testRecordTypeB {
    val recordTypeBString = """     1     1  5041     1  249800.000000000000000 6649800.000000000000000       0.000000000000000      97.908973693847656     655.099914550781250  1277  1287  1295  1301  1306  1311  1314  1314  1313  1311  1304  1299  1295  1283  1266  1245  1216  1190  1168  1132  1085  1032  1011  1004  1003  1004  1007  1010  1014  1014  1008   999   990   981   979   987   998  1013  1027  1041  1052  1061  1072  1084  1096  1107  1117  1131  1152  1176  1196  1210  1221  1232  1243  1249  1252  1253  1258  1266  1275  1286  1297  1307  1317  1328  1342  1356  1370  1384  1411  1437  1451  1451  1450  1458  1471  1484  1496  1506  1516  1527  1538  1547  1554  1567  1589  1615  1644  1675  1702  1722  1739  1755  1770  1787  1803  1819  1836  1854  1874  1897  1924  1945  1954  1957  1966  1986  2004  2014  2023  2030  2033  2035  2043  2053  2062  2078  2099  2116  2117  2113  2113  2115  2118  2123  2133  2149  2175  2203  2228  2244  2267  2308  2373  2442  2506  2563  2621  2676  2730  2818  2904  2933  2941  2939    """
    val parsed = parse(recordTypeB, recordTypeBString)
    println(parsed)
    parsed.get
  }



  @Test
  def testDemParser {
    val f: BufferedSource = Source.fromFile("C:/dev/src/temp/6602_1_10m_z33.dem")(Codec.ISO8859)
    val dem = parse(recordTypeA, f.bufferedReader())
    f.close()
    println(dem)
  }

  @Test
  def testAnyN: Unit = {
    val s = "     1" //5 space, 1
    val p = DemParser.parse(DemParser.anyN(6), s)
    p.get
  }
}
